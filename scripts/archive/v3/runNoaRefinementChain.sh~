#!/bin/bash
LOC="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

ENDPOINT="http://localhost:8080/endpoint"
DB="endpoint"
GRIDURL="http://kk.di.uoa.gr/grid_4.nt"
CHECKDIR="/home/konstantina/hotspots/"

#="http://localhost/noa-teleios/out_triples/"
dataDir="http://godel.di.uoa.gr/hotspots/"
name="HMSG2_IR_039_s7_0708"
suffix=".hotspots.n3"

logFile="chain.log"
#countWTime="/usr/bin/time -p   %e"
#echo > ${logFile}

function timer()
{
    if [[ $# -eq 0 ]]; then
        echo $(date '+%s')
    else
        local  stime=$1
        etime=$(date '+%s')

        if [[ -z "$stime" ]]; then stime=$etime; fi

        dt=$((etime - stime))
        ds=$((dt % 60))
        dm=$(((dt / 60) % 60))
        dh=$((dt / 3600))
        printf '%d:%02d:%02d' $dh $dm $ds
    fi
}

#prin
#tmr1=$(timer)
#meta
#tmr2=$(timer)
#ektypwsi
#printf 'LALA %s %s\n' $((tmr2-tmr1)) $(timer $tmr1)


deleteSeaHotspots=`cat ${LOC}/DeleteInSea.sparql` # | sed 's/\"/\\\"/g'`
refinePartialSeaHotspots=`cat ${LOC}/Refine.sparql` # | sed 's/\"/\\\"/g'`
refineTimePersistence=`cat ${LOC}/TimePersistence.sparql` # | sed 's/\"/\\\"/g'`
ValidateInLand=`cat ${LOC}/ValidateInLand.sparql` # | sed 's/\"/\\\"/g'`


# Initialize
sudo service postgresql restart
echo "Dropping endpoint database";
sudo -u postgres dropdb ${DB}
echo "Creating endpoint database"
sudo -u postgres createdb ${DB} -T postgistemplate
echo "restarting tomcat"
sudo service tomcat7 restart

echo "initializing database"
echo "S D R TP" >>stderr.txt

 ../endpoint store ${ENDPOINT} N-Triples -u ${GRIDURL}

#./scripts/endpoint query ${ENDPOINT} "SELECT (COUNT(*) AS ?C) WHERE {?s ?p ?o}" 
#sudo -u postgres psql -d endpoint -c 'CREATE INDEX datetime_values_idx_value ON datetime_values USING btree(value)';
#sudo -u postgres psql -d endpoint -c 'VACUUM ANALYZE;';


#echo "Continue?"
#read a



for d in `seq 24 25 `; do
for h in `seq 0 23 `; do
    for m in `seq 0 15 45`; do
            time=`printf "%02d%02d\n" $h $m`
            time2=`printf "%02d:%02d\n" $h $m`
	    day=`printf "%02d" $d`
            file=${dataDir}${name}${day}_${time}$suffix
	    check=${CHECKDIR}${name}${day}_${time}$suffix

	      if [[ !  -e $check ]];
              then echo "FILE" $check "NOT EXISTS" ; continue
	      fi
 
#            file=${dataUrl}${name}${day}_${time}$suffix
    
            # store file
            echo -n "storing " $file; echo; echo; 
	  # echo "Hotspot : " $h:$m >> stderr.txt
#            ${countTime} ./strabon -db endpoint store $file      

 tmr1=$(timer)
            ../endpoint store ${ENDPOINT} N-Triples -u ${file} 
 tmr2=$(timer)
printf '%s ' $((tmr2-tmr1)) >>stderr.txt
           
	   # sudo -u postgres psql -d endpoint -c 'VACUUM ANALYZE;';

            echo;echo;echo;echo "File ${file} stored!" >> ${logFile}
#            echo "Continue?"
#            read a
         
            # deleteSeaHotspots
            echo -n "Going to deleteSeaHotspots 2007-08-${day}T${time2}:00 " ;echo; echo; echo;
            query=`echo "${deleteSeaHotspots}" | sed "s/TIMESTAMP/2007-08-${day}T${time2}:00/g" | \
                sed "s/PROCESSING_CHAIN/DynamicThresholds/g" | \
                sed "s/SENSOR/MSG2/g"`
#            ${countTime} ./strabon -db endpoint update "${query}"

tmr1=$(timer)           
  ../endpoint update ${ENDPOINT} "${query}"  
            
tmr2=$(timer)
printf '%s ' $((tmr2-tmr1)) >>stderr.txt

            echo;echo;echo;echo "File ${file} deleteSeaHotspots done!"
#            echo "Continue?"
#            read a
        #validate hotspots in land
#     echo -n "Going to VaidateLandHotspots 2007-08-${day}T${time2}:00 " ;echo; echo; echo;
# query=`echo "${ValidateInLand}" | sed "s/TIMESTAMP/2007-08-${day}T${time2}:00/g" | \
 #               sed "s/PROCESSING_CHAIN/DynamicThresholds/g" | \
  #              sed "s/SENSOR/MSG2/g"`
#		tmr1=$(timer)           
 # 		../endpoint update ${ENDPOINT} "${query}"  
  #          
#		tmr2=$(timer)
#		printf '%s ' $((tmr2-tmr1)) >>stderr.txt

 #           echo;echo;echo;echo "File ${file} Validate Hotspots in Land done!"

            # refinePartialSeaHotspots
            echo -n "refinePartialSeaHotspots 2007-08-${day}T${time2}:00 "  ; echo; echo ; echo;
            query=`echo "${refinePartialSeaHotspots}" | sed "s/TIMESTAMP/2007-08-${day}T${time2}:00/g" | \
                sed "s/PROCESSING_CHAIN/DynamicThresholds/g" | \
                sed "s/SENSOR/MSG2/g"`
#            ${countTime} ./strabon -db endpoint update "${query}"
tmr1=$(timer)
              ../endpoint update ${ENDPOINT} "${query}"
            
tmr2=$(timer)
printf '%s ' $((tmr2-tmr1)) >>stderr.txt

            echo "File ${file} refinePartialSeaHotspots done!"
#            echo "Continue?"
#            read a

            # refineTimePersistence
            echo -n "Going to refineTimePersistence 2007-08-${day}T${time2}:00 ";echo;echo;echo; 
            min_acquisition_time=`date --date="2007-08-${day} ${time2}:00 EEST -30 minutes" +%Y-%m-%dT%H:%m:00`
            query=`echo "${refineTimePersistence}" | sed "s/TIMESTAMP/2007-08-${day}T${time2}:00/g" | \
                sed "s/PROCESSING_CHAIN/DynamicThresholds/g" | \
                sed "s/SENSOR/MSG2/g" | \
                sed "s/ACQUISITIONS_IN_HALF_AN_HOUR/3.0/g" | \
                sed "s/MIN_ACQUISITION_TIME/${min_acquisition_time}/g"`

#            echo "Query:"
#            echo "${query}"
#            echo "Continue?"
#            read a
#            ${countTime} ./strabon -db endpoint update "${query}"
#            ${countTime} ../endpoint update ${ENDPOINT} "${query}"

 sudo -u postgres psql -d ${DB} -c 'VACUUM ANALYZE;';


tmr1=$(timer)
              ../endpoint update ${ENDPOINT} "${query}"
 tmr2=$(timer)
printf '%s \n' $((tmr2-tmr1)) >>stderr.txt
           
            echo;echo;echo;echo "File ${file} timePersistence done!"
#            echo "Continue?"
#            read a
    done
done
done


#for f in `ls /home/konstantina/noa-teleios/out_triples/HMSG2_IR_039_s7_070825_*.hotspots.n3`
#do

#    echo "Store $f"
#	${countTime} ./scripts/strabon -db endpoint store $f
#	
#	
#done

